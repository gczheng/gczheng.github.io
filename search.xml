<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[001：介绍和安装]]></title>
    <url>%2F2018%2F10%2F15%2F001%EF%BC%9A%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[001：介绍和安装[TOC] MySQL介绍和安装一. MySQL版本选择 MySQL5.6 以后的版本，推荐使用官方版本。 Percona：在5.6版本以后，MySQL将Percon之前优化集成到官方版本中; MariaDB：无INNODB;且核心代码较老 MySQL在5.6以后不断重构源码，安装包越来越大，功能和性能在持续改进 二. MySQL官方网站介绍官方网站：http://www.mysql.com 1. Developer Zone： MySQL开发工程师板块 Articles： Oracle工程师自己的博客 Plant MySQL： 和MySQL相关从业人员的博客 Bugs：MySQL BugList Worklog：开发记录 Labs：MySQL实验性项目 2. Downloads：MySQL下载 Enterprise：MySQL企业版本相关，略过 Community：社区版，我们下载和使用社区版 MySQL Community Server：MySQL Server MySQL Fabric : 和管理相关的工具 MySQL Router：路由中间件 MySQL Utilities：MySQL应用程序包 MySQL Workbench：官方图型化管理界面 MySQL Proxy：MySQL代理。Alpha版本，不推荐 3. Documentation：MySQL文档 官方文档 版面更改，下载离线文档在左侧Menu的下面 PDF A4 EPUB HTML 三. MySQL下载 推荐下载Linux-Generic版本 Source Code版本主要作用是为了让开发人员研究源码使用，自己编译对性能提升不明显 不推荐Version 5.5.X，有部分bug 推荐使用Version 5.6.X和Version 5.7.X 下载地址： MySQL Community Server 5.7.18 Linux Generic x86-64bit MySQL Community Server 5.6.27 Linux Generic x86-64bit 四. MySQL安装1. 安装通用步骤： 解压缩mysql-VERSION-linux-glibc2.5-x86_64.tar.gz 打开INSTALL_BINARY 文件，按照shell&gt;开头的步骤进行操作 将export PATH=/安装路径/mysql/bin:$PATH添加到/etc/profile chkconfig mysqld on或者chkconfig mysqld.server on因你的环境而定。 2. MySQL 5.6.X 安装：123456789101112131415shell&gt; yum install libaio # Debain系用户:apt-get install libaio1shell&gt; groupadd mysqlshell&gt; useradd -r -g mysql mysqlshell&gt; cd /usr/localshell&gt; tar zxvf /path/to/mysql-VERSION-OS.tar.gzshell&gt; ln -s full-path-to-mysql-VERSION-OS mysqlshell&gt; cd mysqlshell&gt; chown -R mysql .shell&gt; chgrp -R mysql .shell&gt; scripts/mysql_install_db --user=mysqlshell&gt; chown -R root .shell&gt; chown -R mysql datashell&gt; bin/mysqld_safe --user=mysql &amp;# Next command is optionalshell&gt; cp support-files/mysql.server /etc/init.d/mysql.server 3. MySQL 5.7.X 安装1234567891011121314151617shell&gt; groupadd mysqlshell&gt; useradd -r -g mysql mysqlshell&gt; cd /usr/localshell&gt; tar zxvf /path/to/mysql-VERSION-OS.tar.gzshell&gt; ln -s full-path-to-mysql-VERSION-OS mysqlshell&gt; cd mysqlshell&gt; mkdir mysql-filesshell&gt; chmod 770 mysql-filesshell&gt; chown -R mysql .shell&gt; chgrp -R mysql .shell&gt; bin/mysqld --initialize --user=mysql #该步骤中会产生临时root@localhost密码shell&gt; bin/mysql_ssl_rsa_setup shell&gt; chown -R root .shell&gt; chown -R mysql data mysql-filesshell&gt; bin/mysqld_safe --user=mysql &amp;# Next command is optionalshell&gt; cp support-files/mysql.server /etc/init.d/mysql.server 4. 验证安装 data目录在安装之前是空目录，安装完成后应该有ibXXX等文件 安装过程中输出的信息中，不应该含有ERROR信息，错误信息默认会写入到$HOSTNAME.err的文件中 通过bin/mysql命令（5.7.X含有临时密码）可以正常登录 5. MySQL启动 mysqld_safe --user=mysql &amp; 即可启动，mysqld_safe是一个守护mysqld进程的脚本程序，旨在mysqld意外停止时，可以重启mysqld进程 也可以通过INSTALL_BINARRY中的的步骤，使用/etc/init.d/mysql.server start进行启动（启动脚本以你复制的实际名字为准，通常改名为mysqld,即/etc/init.d/mysqld start） 五. 附录1. 配置文件my.cnf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146# line: V1.0# mail: gczheng@139.com# date: 2017-10-01# file_name: my.cnf# function: ## 注意：建议参数可需要根据实际情况作调整## 本配置文件主要适用于MySQL 5.7.18版本# ********* 以下重要参数必须修改核对 *********# 1.innodb_flush_log_at_trx_commit=1# 2.sync_binlog = 1# 3.innodb_strict_mode = OFF #关闭InnoDB严格检查模式# 4.innodb_flush_method = O_DIRECT# 5.lower_case_table_names = 0 #设置区分大小写# 6.character-set-server = utf8mb4# 7.sql_mode #配置为空值# 8.server-id =1 #修改成对应数值# 9.innodb_buffer_pool_size = 10G #纯mysql server 配置50%和 混合内存配置不低于10G~40%#10.key_buffer_size=1G #如果有myisam表请配置为1G，没有请配置64M#11.innodb_data_file_path = ibdata1:1G:autoextend #确认配置是否跟原来一样,之前已配置好请维持原样,如未配置请注释掉，新版本请取消注释#12.log_bin = /r2/mysqldata/binlog #旧版本或者之前已配置好如：log_bin =/r2/mysqldata/slave-bin，请维持原样#13.slave-parallel #从库开启并行复制，并行复制参数取消注释#14.undolog #确认配置是否跟原来一样,之前已配置好请维持原样,如未配置请注释掉，新版本（包括升级版本）请取消注释并创建目录并授权# ********************************************[client]port = 3306socket = /r2/mysqldata/mysql.sock#=======================================================================# # MySQL客户端配置#=======================================================================[mysql]prompt="(\u@\h) \\R:\\m:\\s [\d]&gt; "no-auto-rehashdefault-character-set = utf8mb4#=======================================================================# MySQL服务器全局配置#=======================================================================[mysqld]user = mysqlport = 3306server-id = 1tmpdir = /r2/mysqldatadatadir = /r2/mysqldatasocket = /r2/mysqldata/mysql.sockwait_timeout = 31536000#interactive_timeout = 600sql_mode = #sql_mode 配置为空值#skip_name_resolve = 1lower_case_table_names = 0character-set-server = utf8mb4#skip-character-set-client-handshake #忽略客户端的字符集，使用服务器的设置log_timestamps = SYSTEMinit_connect= 'SET NAMES utf8mb4'max_allowed_packet = 128M######################### 性能参数 ####################open_files_limit = 10240max_connections = 10000max_user_connections=9990max_connect_errors = 100000table_open_cache = 1024thread_cache_size = 64max_heap_table_size = 32Mquery_cache_type = 0###global cache ###key_buffer_size = 1Gquery_cache_size = 0tmp_table_size = 32M #内存临时表binlog_cache_size = 4M #二进制日志缓冲###session cache ###sort_buffer_size = 8M #排序缓冲join_buffer_size = 4M #表连接缓冲read_buffer_size = 8M #顺序读缓冲read_rnd_buffer_size = 8M #随机读缓冲thread_stack = 256KB #线程的堆栈的大小######################### binlog设置 #####################binlog_format = ROWlog_bin = /r2/mysqldata/binlogmax_binlog_size = 1Gexpire_logs_days = 15 #binlog比较占空间，注意磁盘空间sync_binlog = 1 #重要参数必须修改为1######################### 复制设置 ########################log_slave_updates = 1#replicate-do-db = test#binlog-ignore-db = mysql### GTID 配置 ###gtid_mode=ONenforce-gtid-consistency=true#****************** 开启并行复制（从库）******************slave-parallel-type=LOGICAL_CLOCK #基于组提交的并行复制方式slave-parallel-workers=8 #并行的SQL线程数量master-info_repository=TABLE #master信息以表的形式保存relay_log_info_repository=TABLE #slave信息以表的形式保存relay_log_recovery=ON #relay_log自我修复######################### innodb ##########################default_storage_engine = InnoDBinnodb_data_file_path = ibdata1:1G:autoextendinnodb_buffer_pool_size = 10G #系统内存50%innodb_open_files = 5120innodb_flush_log_at_trx_commit = 1 #线上服务器必须配置为1innodb_file_per_table = 1innodb_lock_wait_timeout = 5innodb_io_capacity = 400 #根据您的服务器IOPS能力适当调整innodb_io_capacity，配SSD盘可调整到 10000 - 20000innodb_io_capacity_max = 20000innodb_flush_method = O_DIRECTinnodb_log_file_size = 2Ginnodb_log_files_in_group = 2innodb_large_prefix = 0innodb_thread_concurrency = 64innodb_strict_mode = OFFinnodb_sort_buffer_size = 4194304#****************** undolog设置 ******************#innodb_undo_directory = /r2/mysqldata/undolog #undolog日志目录#innodb_undo_tablespaces = 2 #undolog日志文件个数，mysql8之后将弃用#innodb_undo_logs = 128 #回滚段的数量， 至少大于等于35，默认128。#innodb_max_undo_log_size = 1G #当超过这个阀值（默认是1G），会触发truncate回收（收缩）动作，truncate后空间缩小到10M。#innodb_purge_rseg_truncate_frequency = 128 #控制回收（收缩）undolog的频率#innodb_undo_log_truncate = 1 #即开启在线回收undolog日志文件######################### log 设置 #####################log_error = /r2/mysqldata/error.logslow_query_log = 1long_query_time = 10slow_query_log_file = /r2/mysqldata/slow.log#=======================================================================# MySQL mysqldump配置#=======================================================================[mysqldump]quickmax_allowed_packet = 128M#=======================================================================# MySQL mysqld_safe配置#=======================================================================[mysqld_safe]log_error = /r2/mysqldata/error.logpid_file = /r2/mysqldata/mysqldb.pid[mysqld-5.7]innodb_buffer_pool_dump_pct = 40innodb_page_cleaners = 4innodb_undo_log_truncate = 1innodb_max_undo_log_size = 2Ginnodb_purge_rseg_truncate_frequency = 128binlog_gtid_simple_recovery=1log_timestamps=systemtransaction_write_set_extraction=MURMUR32show_compatibility_56=on 2. 几个重要的参数配置和说明 innodb_log_file_size = 4G :做实验可以更改的小点，线上环境推荐用4G，以前5.5和5.1等版本之所以官方给的值很小，是因为太大后有bug，现在bug已经修复 innodb_undo_logs = 128和innodb_undo_tablespaces = 3建议在安装之前就确定好该值，后续修改比较麻烦 [mysqld]，[mysqld-5.7]这种tag表明了下面的配置在什么版本下才生效,[mysqld]下均生效 datadir, innodb_log_group_home_dir, innodb_undo_directory一定要注意他的权限是 mysql:mysql 3. my.cnf问题 使用mysqld --help -vv | grep my.cnf查看mysql的配置文件读取顺序 后读取的my.cnf中的配置，如果有相同项，会覆盖之前的配置 使用--defaults-files可指定配置文 4. 安装脚本 run_02_install_new_mysql_version.sh 注意：脚本、my.cnf文件和mysql-5.7.18-linux-glibc2.5-x86_64.tar.gz放在同一目录下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279#!/bin/bash# line: V1.0# mail: gczheng@139.com# data: 2018-06-21# script_name: run_02_install_new_mysql_version.sh# function: Install mysql5.7.18#=======================================================================#配置信息#=======================================================================MYCNF=my.cnfMYSQL_SOURCE_PACKAGES=mysql-5.7.18-linux-glibc2.5-x86_64.tar.gzMYSQL_DOWNLOAD_LINK='http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.18-linux-glibc2.5-x86_64.tar.gz'MYSQL=/usr/local/mysql/bin/mysql#=======================================================================# echo添加颜色#=======================================================================echo_color()&#123; color=$&#123;1&#125; &amp;&amp; shift case $&#123;color&#125; in black) echo -e "\e[0;30m$&#123;@&#125;\e[0m" ;; red) echo -e "\e[0;31m$&#123;@&#125;\e[0m" ;; green) echo -e "\e[0;32m$&#123;@&#125;\e[0m" ;; yellow) echo -e "\e[0;33m$&#123;@&#125;\e[0m" ;; blue) echo -e "\e[0;34m$&#123;@&#125;\e[0m" ;; purple) echo -e "\e[0;35m$&#123;@&#125;\e[0m" ;; cyan) echo -e "\e[0;36m$&#123;@&#125;\e[0m" ;; *) echo -e "\e[0;37m$&#123;@&#125;\e[0m" ;; esac # --- end of case ---&#125;#=======================================================================#检查安装包、脚本、my.cnf是否齐全#=======================================================================function chk_install_resource()&#123; #判断 template_install-my.cnf 是否存在 if [ ! -f "$MYCNF" ];then echo_color red "$(date +'%Y-%m-%d %H:%M:%S') $MYCNF file is not exits!$(echo_warning)" exit 1 fi #判断 MySQL Community Server 5.7.18 tar包是否存在 if [ ! -f "$MYSQL_SOURCE_PACKAGES" ];then echo_color red "$(date +'%Y-%m-%d %H:%M:%S') $MYSQL_SOURCE_PACKAGES is not exits, please download it from $MYSQL_DOWNLOAD_LINK" exit 1 fi&#125;#=======================================================================# 添加帐号和目录#=======================================================================function create_sys_user()&#123; #添加mysql用户信息 if id mysql &amp;&gt; /dev/null;then echo_color red "$(date +'%Y-%m-%d %H:%M:%S') MySQL user is exits." else useradd -r -s /bin/false mysql &amp;&amp; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') The system user is added to success .." fi #添加mysql数据目录/r2/mysqldata和权限 if [ -d "/r2" ];then if [ ! -d "/r2/mysqldata" ];then mkdir -p /r2/mysqldata &amp;&amp; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') MySQL data directory is created .." chown -R mysql:mysql /r2/mysqldata chmod 750 /r2/mysqldata elif [ "$(ls -A /r2/mysqldata)" = "" ];then echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') MySQL data directory is exits." else echo_color red "$(date +'%Y-%m-%d %H:%M:%S') MySQL data directory is not empty. Please check it." exit 1 fi else echo_color red "$(date +'%Y-%m-%d %H:%M:%S') /r2 directory is not exits. Please check the system config." exit 1 fi&#125;#=======================================================================#检查是否有旧的mysql/mariadb版本存在#=======================================================================function chk_old_mysql_version()&#123; mysqlNum=$(rpm -qa | grep -Ei 'mysql|mariadb'|wc -l) if [ "$&#123;mysqlNum&#125;" -gt "0" ];then echo_color red "$(date +'%Y-%m-%d %H:%M:%S') The system has MySQL other version. There may be a conflict in the version！If it continues, the original database will be uninstall." read -p "Do you continue to install it(y/n):" cn case $cn in y|Y) rpm -qa | grep -Ei 'mysql|mariadb' | xargs yum remove -y &amp;&gt; /dev/null tar_install ;; n|N) exit 1 ;; *) echo_color red "$(date +'%Y-%m-%d %H:%M:%S') Input ERROR." esac else echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') No old version was found." tar_install fi&#125;#=======================================================================# 解压安装#=======================================================================function tar_install()&#123; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Starting unzip $MYSQL_SOURCE_PACKAGES .." tar zxvf $MYSQL_SOURCE_PACKAGES -C /usr/local/ echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Unzip $MYSQL_SOURCE_PACKAGES SUCCESS .." if [ ! -d "/usr/local/mysql" ];then ln -s /usr/local/`echo $MYSQL_SOURCE_PACKAGES |awk -F ".tar.gz" '&#123;printf $1&#125;'` /usr/local/mysql chown -R mysql:mysql /usr/local/mysql chown -R mysql:mysql /usr/local/`echo $MYSQL_SOURCE_PACKAGES |awk -F ".tar.gz" '&#123;printf $1&#125;'` chmod 750 /usr/local/mysql chmod 750 /usr/local/`echo $MYSQL_SOURCE_PACKAGES |awk -F ".tar.gz" '&#123;printf $1&#125;'` echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') MySQL package has been placed in the right position .." cp -f $MYCNF /etc/my.cnf else read -p "/usr/local/mysql install directory already exists, delete it, and continue(y/n):" dn case $dn in y|Y) rm -rf /usr/local/mysql ln -s /usr/local/`echo $MYSQL_SOURCE_PACKAGES |awk -F ".tar.gz" '&#123;printf $1&#125;'` /usr/local/mysql chown -R mysql:mysql /usr/local/mysql chown -R mysql:mysql /usr/local/`echo $MYSQL_SOURCE_PACKAGES |awk -F ".tar.gz" '&#123;printf $1&#125;'` chmod 750 /usr/local/mysql chmod 750 /usr/local/`echo $MYSQL_SOURCE_PACKAGES |awk -F ".tar.gz" '&#123;printf $1&#125;'` echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') MySQL package has been placed in the right position .." cp -f $MYCNF /etc/my.cnf ;; n|N) exit 1 ;; *) echo_color red "$(date +'%Y-%m-%d %H:%M:%S') /usr/local/mysql is exits.Please check it." esac fi echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Starting initialization .." /usr/local/mysql/bin/mysqld --initialize --user=mysql &amp;&gt; /dev/null &amp;&amp; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Initialization ......SUCCESS"&#125;#=======================================================================# 修改环境变量#=======================================================================function add_system_profile()&#123;cat &gt;&gt; /etc/profile &lt;&lt;EOFexport PATH=\$PATH:/usr/local/mysql/bin/EOFsource /etc/profile&#125;function modify_system_env()&#123;#egrep "/usr/local/mysql/bin/" /etc/profile &amp;&gt; /dev/nullPROFILES=`grep -i "/usr/local/mysql/bin/" /etc/profile |wc -l`if [ $PROFILES -eq 0 ];then add_system_profile echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Flush profile done .."else EXISTS=`grep -i "/usr/local/mysql/bin/" /etc/profile |grep -e "^#" |wc -l` if [ $EXISTS -gt 0 ];then add_system_profile echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Flush profile done .." fifi&#125;#=======================================================================#创建MySQL服务#=======================================================================function el7_create_mysql_service()&#123; cat &gt; /usr/lib/systemd/system/mysql.service &lt;&lt;EOF[Unit]Description=mysqlAfter=syslog.target network.target remote-fs.target nss-lookup.target[Service]Type=forkingExecStart=/usr/local/mysql/support-files/mysql.server startExecReload=/usr/local/mysql/support-files/mysql.server restartExecStop=/usr/local/mysql/support-files/mysql.server stopLimitNOFILE = 65535PrivateTmp=false[Install]WantedBy=multi-user.targetEOF systemctl daemon-reload &amp;&amp; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Reload systemd services .." systemctl enable mysql.service &amp;&amp; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Enable MySQL systemd service .." systemctl start mysql.service &amp;&amp; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Starting MySQL......SUCCESS!" || echo_color red "$(date +'%Y-%m-%d %H:%M:%S') Starting MySQL......FAILED!."&#125;function el6_create_mysql_service()&#123; cd /usr/local/mysql/support-files/ cp mysql.server /etc/init.d/mysql chmod +x /etc/init.d/mysql chkconfig --add mysql &amp;&amp; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Add MySQL service for management .." chkconfig --list mysql &amp;&amp; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') List MySQL service .." /etc/init.d/mysql start &amp;&amp; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Starting MySQL......SUCCESS!" || echo_color red "$(date +'%Y-%m-%d %H:%M:%S') Starting MySQL......FAILED!."&#125;#=======================================================================# 添加帐号#=======================================================================function modify_mysql_account()&#123; password=$(awk '/A temporary password/ &#123;print $NF&#125;' /r2/mysqldata/error.log) #echo_color cyan "mysql temp password is $&#123;password&#125;" if [ "$&#123;password&#125;" != "" ];then $&#123;MYSQL&#125; -uroot -p"$&#123;password&#125;" --connect-expired-password -e "alter user root@localhost identified by 'iforgot';flush privileges;" &amp;&gt; /dev/null &amp;&amp; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') 系统随机密码修改成功." p1=$? else echo_color red "$(date +'%Y-%m-%d %H:%M:%S') MySQL密码获取失败，请排查/清除数据目录重新安装." exit 1 fi $&#123;MYSQL&#125; -uroot -piforgot -e "grant all privileges on *.* to gcdb@'%' identified by 'iforgot';" &amp;&gt; /dev/null &amp;&amp; echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') 授予gcdb@'%'用户通过任意主机操作所有数据库的所有权限成功." p2=$? if [[ "$&#123;p1&#125;" == "0" &amp;&amp; "$&#123;p2&#125;" == "0" ]];then echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') 现在可以登录mysql数据库，root@localhost和gcdb@'%'用户的默认密码是\033[41;37m iforgot \033[0m." else echo_color red "$(date +'%Y-%m-%d %H:%M:%S') 授权失败,请手动执行授权操作." fi&#125;#=======================================================================# 开始安装mysql#=======================================================================function mysql_install()&#123; version=$(uname -r |awk -F '.' '&#123; print $(NF-1) &#125;') if [ "$&#123;version&#125;" != "el7" ];then echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Start install mysql for el6." chk_install_resource create_sys_user chk_old_mysql_version modify_system_env el6_create_mysql_service modify_mysql_account else echo_color cyan "$(date +'%Y-%m-%d %H:%M:%S') Start install mysql for el7." chk_install_resource create_sys_user chk_old_mysql_version modify_system_env el7_create_mysql_service modify_mysql_account fi&#125;mysql_installecho_color blue "$(date +'%Y-%m-%d %H:%M:%S') \033[42;37m run_02_install_new_mysql_version.sh执行完成 \033[0m"]]></content>
  </entry>
</search>
